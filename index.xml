<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>henyxia&#39;s website</title>
    <link>https://henyxia.github.io/</link>
    <description>Recent content on henyxia&#39;s website</description>
    <generator>Hugo -- gohugo.io</generator>
    
	<atom:link href="https://henyxia.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Module presentation</title>
      <link>https://henyxia.github.io/scholar/gis4-2020/00-intro/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://henyxia.github.io/scholar/gis4-2020/00-intro/</guid>
      <description> Module presentation We are going to talk about virtualization!  What is virtualization? How virtualization works? Why virtualize? How to virtualize properly?  How will the module will be rated?  Presence: 1 point Tutorial: 8 points Written test: 10 points For those who will deserve it: 1 point  </description>
    </item>
    
    <item>
      <title>What is a computer</title>
      <link>https://henyxia.github.io/scholar/gis4-2020/01-what-is-a-computer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://henyxia.github.io/scholar/gis4-2020/01-what-is-a-computer/</guid>
      <description> How computer works A computer is composed of many part:
 CPU GPU RAM HDD/SDD  How computer works Step 1: Power on button Step 2 :Magic Step 3: OS starts </description>
    </item>
    
    <item>
      <title>Module presentation</title>
      <link>https://henyxia.github.io/scholar/gis4-2019/00-intro/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://henyxia.github.io/scholar/gis4-2019/00-intro/</guid>
      <description>Module presentation Most of this module is taken from my teacher&amp;rsquo;s website (in French).
Creating an Highly Available web application First, what is an highly available web application?
Creating a &amp;lsquo;just available&amp;rsquo; web application Let&amp;rsquo;s start with a simpler design.</description>
    </item>
    
    <item>
      <title>How works a computer</title>
      <link>https://henyxia.github.io/scholar/gis4-2020/02-how-works-a-computer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://henyxia.github.io/scholar/gis4-2020/02-how-works-a-computer/</guid>
      <description> How computer really works  BIOS (or UEFI) received power on signal BIOS initialize all direct peripherals BIOS looks for a bootable device BIOS switch to bootloader Bootloader loads kernel Kernel initialize everything Kernel switch to userland (init, systemd-init, wininit.exe) Init starts service manager (systemd, openrc, svchost.exe) Service manager starts real software (nginx, sshd, kde4)  How computer really works Process tree henyxia@yggdrasil:~ pstree systemd─┬─ModemManager───2*[{ModemManager}] ├─NetworkManager───2*[{NetworkManager}] ├─alsactl ├─auditd───{auditd} ├─avahi-daemon───avahi-daemon ├─bash───firefox─┬─RDD Process───3*[{RDD Process}] │ ├─4*[Web Content───42*[{Web Content}]] │ ├─Web Content───39*[{Web Content}] │ ├─2*[Web Content───41*[{Web Content}]] │ ├─WebExtensions───32*[{WebExtensions}] │ └─80*[{firefox}] ├─bash───pavucontrol───3*[{pavucontrol}] ├─bash───spotify─┬─spotify───spotify───11*[{spotify}] │ ├─2*[spotify───4*[{spotify}]] │ └─29*[{spotify}]  </description>
    </item>
    
    <item>
      <title>Reminders</title>
      <link>https://henyxia.github.io/scholar/gis4-2019/01-reminders/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://henyxia.github.io/scholar/gis4-2019/01-reminders/</guid>
      <description>System administration, network and virtualization introduction What is TCP/IP?  source: Wikipedia
 What is a DNS nameserver?  source: Wikipedia
 Some widely used ports  80 HTTP 443 HTTPS 53 DNS
 22 SSH
 123 NTP
 25 SMTP
  What is Apache 2? |||v
&amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;title&amp;gt;My awesome website&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; Awesome! It works! &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt;  |||</description>
    </item>
    
    <item>
      <title>Network commands</title>
      <link>https://henyxia.github.io/scholar/gis4-2019/02-network/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://henyxia.github.io/scholar/gis4-2019/02-network/</guid>
      <description>Let&amp;rsquo;s do some network! YAY! Network cards and MACs List interfaces root@my-server:~# ip link show 1: lo: &amp;lt;LOOPBACK,UP,LOWER_UP&amp;gt; mtu 65536 qdisc noqueue state UNKNOWN mode DEFAULT group default qlen 1 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 2: eno1: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc mq state UP mode DEFAULT group default qlen 1000 link/ether 0c:c4:7b:84:5f:2e brd ff:ff:ff:ff:ff:ff 3: eno2: &amp;lt;BROADCAST,MULTICAST&amp;gt; mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000 link/ether 0c:c4:7b:84:5f:3e brd ff:ff:ff:ff:ff:ff  Start an interface ip link set eno1 up  Change a MAC address ip link set eno1 address 00:11:22:33:44:55  Network cards and IPs List IPs root@my-server:~# ip address show 1: lo: &amp;lt;LOOPBACK,UP,LOWER_UP&amp;gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 inet 127.</description>
    </item>
    
    <item>
      <title>What is virtualization</title>
      <link>https://henyxia.github.io/scholar/gis4-2020/03-what-is-virtualization/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://henyxia.github.io/scholar/gis4-2020/03-what-is-virtualization/</guid>
      <description> What is &amp;ldquo;virtualization&amp;rdquo; Three kind of virtualization:
 Virtualization Paravirtualization Containerization  Virtualization  Virtualization consist of a lonely process This process emulates a whole computer The virtual machine is totally isolated from the host  Paravirtualization  Paravirtualization also consist of a lonely process This process also emulates a whole computer The virtual machine is a little bit less isolated from the host (share CPU)  Containerization  Containerization also consist of a lonely process This process just runs one software The software is isolated from the host with namespaces  </description>
    </item>
    
    <item>
      <title>What is virtualization</title>
      <link>https://henyxia.github.io/scholar/gis4-2020/04-what-are-containers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://henyxia.github.io/scholar/gis4-2020/04-what-are-containers/</guid>
      <description> What is a container  A container is an archive It contains the minimal requirement to run one software The process is isolated (only see itself) with the help of the host kernel  What are namespaces  Namespaces are an isolation method given by the kernel Different kind of namespaces exists (mnt, pid, net, ipc, uts, user, &amp;hellip;) Way lighter than a full virtualization  </description>
    </item>
    
    <item>
      <title>VLAN definition</title>
      <link>https://henyxia.github.io/scholar/gis4-2019/03-vlan/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://henyxia.github.io/scholar/gis4-2019/03-vlan/</guid>
      <description> What is a VLAN? |||v
Why VLAN?  Local Area Network (LAN) security limitations Inefficient cost with scale  Virtual Local Area Network  Defined by two RFCs: IEEE 802.1q and IEEE 802.3ac Allow seperated LAN inside the same media All communication between VLANs go through a router  |||
 Source: Wikipedia
 </description>
    </item>
    
    <item>
      <title>Cisco presentation</title>
      <link>https://henyxia.github.io/scholar/gis4-2019/04-cisco/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://henyxia.github.io/scholar/gis4-2019/04-cisco/</guid>
      <description>Now let&amp;rsquo;s do this on real equipments! Network equipments Definition  Like a desktop computer, but with signigicant differences CPUs with lower capacity Some dedicated chips to handle the data flow Specific operating systems (Cisco IOS) No screens, no USB but a lot of ports Configurable via serial or SSH  Some basics With an example:
my-server$ ssh admin@router Password: router&amp;gt;enable Password: router#configure terminal Enter configuration commands, one per line.</description>
    </item>
    
    <item>
      <title>Why moving to containers</title>
      <link>https://henyxia.github.io/scholar/gis4-2020/05-why-moving-to-containers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://henyxia.github.io/scholar/gis4-2020/05-why-moving-to-containers/</guid>
      <description> Why use containers?  Lighter and faster than (para)virtualization Easily sharable (cf hub.docker.com) Repeatable builds  The pet vs cattle principle  Servers are now generic, not unique anymore Services are deployed identically everywhre Making maintenance (and life) easier  </description>
    </item>
    
    <item>
      <title>Reminders</title>
      <link>https://henyxia.github.io/scholar/gis4-2020/06-reminders/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://henyxia.github.io/scholar/gis4-2020/06-reminders/</guid>
      <description>OSI layers  Every network transmission is ruled by the OSI layers Every protocol is in one of the seven layers Every protocol is ruled by the IETF  OSI layers simplified  Layer 3 (L3): Internet layer (ex: IPv4, IPv6, ICMP, ICMPv6) Layer 4 (L4): Transport layer (ex: TCP, UDP) Layer 7 (L7): Application layer (ex: DNS, HTTP, SSH)  IP  Identifies a PC/server/VM/container on a network Two type: IPv4 (55.</description>
    </item>
    
    <item>
      <title>Sys admin</title>
      <link>https://henyxia.github.io/scholar/gis4-2019/05-system-administration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://henyxia.github.io/scholar/gis4-2019/05-system-administration/</guid>
      <description>System administration What is apt-get?  Package manager Replaced by apt in recent distributions Allow to install and maintain softwares  APT basics Install a package $ apt install apache2 Reading package lists... Done Building dependency tree Reading state information... Done The following packages were automatically installed and are no longer required: hddtemp node-normalize.css python3-bottle python3-influxdb python3-netifaces python3-ply python3-psutil python3-pycryptodome python3-pysmi python3-pysnmp4 python3-pystache Use &#39;apt autoremove&#39; to remove them. The following additional packages will be installed: apache2-bin apache2-data apache2-utils libapr1 libaprutil1 libaprutil1-dbd-sqlite3 libaprutil1-ldap Suggested packages: apache2-doc apache2-suexec-pristine | apache2-suexec-custom The following NEW packages will be installed: apache2 apache2-bin apache2-data apache2-utils libapr1 libaprutil1 libaprutil1-dbd-sqlite3 libaprutil1-ldap 0 upgraded, 8 newly installed, 0 to remove and 157 not upgraded.</description>
    </item>
    
    <item>
      <title>Docker</title>
      <link>https://henyxia.github.io/scholar/gis4-2019/06-docker/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://henyxia.github.io/scholar/gis4-2019/06-docker/</guid>
      <description>What is Docker?  Isolation technology allowing to run a software within the same kernel as the host A separated process namespace is created for this purpose Docker run images, which are a full snapshot of applications (with their dependencies if needed) Images can be ran anywhere, no matter the operating system used Many base images have already been build by the community and hosted in Docker Hub  Docker basics Pull an image $ docker pull nginx:latest latest: Pulling from library/nginx b8f262c62ec6: Pull complete a6639d774c21: Pull complete 22a7aa8442bf: Pull complete Digest: sha256:9688d0dae8812dd2437947b756393eb0779487e361aa2ffbc3a529dca61f102c Status: Downloaded newer image for nginx:latest  Docker basics Start an image detached $ docker run -it nginx:latest # detach with ^C-P ^C-Q  Start an image attached $ docker run -d nginx:latest 39a0263258f66217fc751aeb799b586d9d14b709f6d2a5dbd502afaa7e89b636  Docker basics List containers $ docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES b9568988ad7a nginx:latest &amp;quot;nginx -g &#39;daemon of…&amp;quot; 3 minutes ago Up 3 minutes 80/tcp agitated_feynman 39a0263258f6 nginx:latest &amp;quot;nginx -g &#39;daemon of…&amp;quot; 4 minutes ago Up 4 minutes 80/tcp suspicious_bardeen  Docker basics Show logs of a container $ docker logs 309fdd3451a9 Initializing Gerrit site .</description>
    </item>
    
    <item>
      <title></title>
      <link>https://henyxia.github.io/scholar/gis4-2020/07-network/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://henyxia.github.io/scholar/gis4-2020/07-network/</guid>
      <description>Network interface List interfaces root@my-server:~# ip link show 1: lo: &amp;lt;LOOPBACK,UP,LOWER_UP&amp;gt; mtu 65536 qdisc noqueue state UNKNOWN mode DEFAULT group default qlen 1 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 2: eno1: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc mq state UP mode DEFAULT group default qlen 1000 link/ether 0c:c4:7b:84:5f:2e brd ff:ff:ff:ff:ff:ff 3: eno2: &amp;lt;BROADCAST,MULTICAST&amp;gt; mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000 link/ether 0c:c4:7b:84:5f:3e brd ff:ff:ff:ff:ff:ff  Start an interface ip link set eno1 up  Change a MAC address ip link set eno1 address 00:11:22:33:44:55  IP addresses List IPs root@my-server:~# ip address show 1: lo: &amp;lt;LOOPBACK,UP,LOWER_UP&amp;gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 inet 127.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://henyxia.github.io/scholar/gis4-2020/08-docker/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://henyxia.github.io/scholar/gis4-2020/08-docker/</guid>
      <description>Docker Pull an image $ docker pull nginx:latest latest: Pulling from library/nginx b8f262c62ec6: Pull complete a6639d774c21: Pull complete 22a7aa8442bf: Pull complete Digest: sha256:9688d0dae8812dd2437947b756393eb0779487e361aa2ffbc3a529dca61f102c Status: Downloaded newer image for nginx:latest  List local images $ docker image ls REPOSITORY TAG IMAGE ID CREATED SIZE bm-tftp 0.1 7ddc54652dcf 10 days ago 71.4MB debian stable-slim da838f7eb4f8 11 days ago 69.2MB batman-dhcp latest deb682e07fda 2 weeks ago 73.3MB rabbitmq 3-management d55229deb03e 8 weeks ago 187MB postgres 11 b7af9a7c9a68 3 months ago 282MB alpine latest a24bb4013296 3 months ago 5.</description>
    </item>
    
    <item>
      <title>HAProxy</title>
      <link>https://henyxia.github.io/scholar/gis4-2019/07-haproxy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://henyxia.github.io/scholar/gis4-2019/07-haproxy/</guid>
      <description>What is HAProxy?  Load balancer written in C Available on most Unix distributions Allow to balance traffic and avoid downtime in case of failure  HAProxy configuration file  Located in /etc/haproxy/haproxy.conf Can be checked with haproxy -c -f /etc/haproxy/haproxy.cfg Restart to apply a new configuration with service haproxy restart  HAProxy configuration global bloc global log /dev/log local0 log /dev/log local1 notice chroot /var/lib/haproxy stats socket /run/haproxy/admin.sock mode 660 level admin stats timeout 30s user haproxy group haproxy daemon # Default SSL material locations ca-base /etc/ssl/certs crt-base /etc/ssl/private # Default ciphers to use on SSL-enabled listening sockets.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://henyxia.github.io/scholar/gis4-2020/09-haproxy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://henyxia.github.io/scholar/gis4-2020/09-haproxy/</guid>
      <description>HAProxy What is HAProxy?  Load balancer written in C Available on most Unix distributions Allow to balance traffic and avoid downtime in case of failure  HAProxy configuration file  Located in /etc/haproxy/haproxy.cfg Can be checked with haproxy -c -f /etc/haproxy/haproxy.cfg Restart to apply a new configuration with service haproxy restart  HAProxy configuration global bloc global log /dev/log local0 log /dev/log local1 notice chroot /var/lib/haproxy stats socket /run/haproxy/admin.</description>
    </item>
    
    <item>
      <title>Nomad</title>
      <link>https://henyxia.github.io/scholar/gis4-2019/08-nomad/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://henyxia.github.io/scholar/gis4-2019/08-nomad/</guid>
      <description>What is Nomad?  Lightweight orchestrator written in Go by HashiCorp Available on most Unix distributions Allow to deploy containers accross multiple hosts  Nomad architecture  Nomad is separated in two roles: master and client Masters receive order and transmit them to the clients Masters ensure the order is respected as much as possible In our scenario: the master is the client too  Nomad configuration files Separated according to their usage:</description>
    </item>
    
    <item>
      <title>Consul</title>
      <link>https://henyxia.github.io/scholar/gis4-2019/09-consul/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://henyxia.github.io/scholar/gis4-2019/09-consul/</guid>
      <description>What is Consul?  Lightweight K/V service registry tool written in Go by HashiCorp Available on most Unix distributions Allow to register service and key  Consul example Consul and DNS $ dig @127.0.0.1 -p 8600 _my-webapp._web.service.consul SRV ; &amp;lt;&amp;lt;&amp;gt;&amp;gt; DiG 9.11.5-P4-5.1-Debian &amp;lt;&amp;lt;&amp;gt;&amp;gt; @10.41.7.83 -p 8600 _my-webapp._web.service.consul SRV ; (1 server found) ;; global options: +cmd ;; Got answer: ;; -&amp;gt;&amp;gt;HEADER&amp;lt;&amp;lt;- opcode: QUERY, status: NOERROR, id: 51598 ;; flags: qr aa rd; QUERY: 1, ANSWER: 4, AUTHORITY: 0, ADDITIONAL: 9 ;; WARNING: recursion requested but not available ;; OPT PSEUDOSECTION: ; EDNS: version: 0, flags:; udp: 4096 ;; QUESTION SECTION: ;_my-webapp.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://henyxia.github.io/scholar/gis4-2020/10-consul/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://henyxia.github.io/scholar/gis4-2020/10-consul/</guid>
      <description>Consul What is Consul?  Lightweight K/V service registry tool written in Go by HashiCorp Available on most Unix distributions Allow to register service and key  Consul example Consul and DNS $ dig @127.0.0.1 -p 8600 _my-webapp._web.service.consul SRV ; &amp;lt;&amp;lt;&amp;gt;&amp;gt; DiG 9.11.5-P4-5.1-Debian &amp;lt;&amp;lt;&amp;gt;&amp;gt; @10.41.7.83 -p 8600 _my-webapp._web.service.consul SRV ; (1 server found) ;; global options: +cmd ;; Got answer: ;; -&amp;gt;&amp;gt;HEADER&amp;lt;&amp;lt;- opcode: QUERY, status: NOERROR, id: 51598 ;; flags: qr aa rd; QUERY: 1, ANSWER: 4, AUTHORITY: 0, ADDITIONAL: 9 ;; WARNING: recursion requested but not available ;; OPT PSEUDOSECTION: ; EDNS: version: 0, flags:; udp: 4096 ;; QUESTION SECTION: ;_my-webapp.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://henyxia.github.io/scholar/gis4-2020/11-dns/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://henyxia.github.io/scholar/gis4-2020/11-dns/</guid>
      <description>DNS DNS record types  A: Host address AAAA: IPv6 host address ALIAS: Auto resolved alias CNAME: Canonical name for an alias MX: Mail eXchange NS: Name Server TXT: text field  Common command $ dig www.google.fr ; &amp;lt;&amp;lt;&amp;gt;&amp;gt; DiG 9.11.13-RedHat-9.11.13-3.fc31 &amp;lt;&amp;lt;&amp;gt;&amp;gt; www.google.fr ;; global options: +cmd ;; Got answer: ;; -&amp;gt;&amp;gt;HEADER&amp;lt;&amp;lt;- opcode: QUERY, status: NOERROR, id: 47305 ;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1 ;; OPT PSEUDOSECTION: ; EDNS: version: 0, flags:; udp: 4096 ;; QUESTION SECTION: ;www.</description>
    </item>
    
    <item>
      <title>Proxmox</title>
      <link>https://henyxia.github.io/scholar/gis4-2019/10-proxmox/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://henyxia.github.io/scholar/gis4-2019/10-proxmox/</guid>
      <description>Proxmox Introduction What is Proxmox?  An operating system based on Debian Can be installed on raw Debian Create and manage containers and virtual machines Gives tool allowing hot and cold migration of VMs And many other features (like user/group management, HA and so on)  Easily usable through a Web UI Four views are available:
 Server view Folder view Storage view Pool view  How to create a new virtual machine  From server or folder view Right click on one node Select create a new VM  The CLI To list VMs</description>
    </item>
    
    <item>
      <title>Ansible</title>
      <link>https://henyxia.github.io/scholar/gis4-2019/11-ansible/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://henyxia.github.io/scholar/gis4-2019/11-ansible/</guid>
      <description>Ansible What is Ansible?  Automation tool Used mostly remotely to deploy and manage Used to describe final configuration Just YAML files  How to use Ansible  Ruled by playbooks
$ cat certificate.yml - name: deploy certificates hosts: - loadbalancers roles: - certificates - loadbalancing   How to use Ansible  Run it
$ ansible-playbook -i inventory certificate.yml --diff --check ... TASK [arillso.logrotate : install logrotate packages] ************************* ok: [haproxy-01] ok: [haproxy-02] TASK [arillso.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://henyxia.github.io/scholar/gis4-2020/12-nomad/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://henyxia.github.io/scholar/gis4-2020/12-nomad/</guid>
      <description>Nomad What is Nomad?  Lightweight orchestrator written in Go by HashiCorp Available on most Unix distributions Allow to deploy containers accross multiple hosts  Nomad architecture  Nomad is separated in two roles: master and client Masters receive order and transmit them to the clients Masters ensure the order is respected as much as possible In our scenario: the master is the client too  Nomad configuration files Separated according to their usage:</description>
    </item>
    
    <item>
      <title></title>
      <link>https://henyxia.github.io/scholar/gis4-2020/13-nginx/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://henyxia.github.io/scholar/gis4-2020/13-nginx/</guid>
      <description>Nginx Main configuration $ cat /etc/nginx/nginx.conf user www-data; worker_processes auto; pid /run/nginx.pid; include /etc/nginx/modules-enabled/*.conf; events { worker_connections 768; } http { sendfile on; tcp_nopush on; tcp_nodelay on; keepalive_timeout 65; types_hash_max_size 2048; include /etc/nginx/mime.types; default_type application/octet-stream; ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # Dropping SSLv3, ref: POODLE ssl_prefer_server_ciphers on; access_log /var/log/nginx/access.log; error_log /var/log/nginx/error.log; include /etc/nginx/conf.d/*.conf; include /etc/nginx/sites-enabled/*; }  Site configuration $ cat /etc/nginx/sites-enabled/default server { listen 8092 default_server; root /var/www/mywebsite; index index.</description>
    </item>
    
    <item>
      <title>Tutorials</title>
      <link>https://henyxia.github.io/scholar/gis4-2019/12-tutorials/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://henyxia.github.io/scholar/gis4-2019/12-tutorials/</guid>
      <description>Tutorials Introduction Team organization  Everyone will have an assigned team Every team will have an unique ID  Tutorials organization  There will be multiple tutorials Every completed tutorial will be rewarded with points The point quantity will be linked to the difficulty of the tutorial Tutorial completion can only be validated by teachers  Final exam notation  The final exam will be a written test It will contain everything seen during course and tutorials It will account for 50% of your final score  Final score Your final score will be composed of:</description>
    </item>
    
    <item>
      <title></title>
      <link>https://henyxia.github.io/scholar/gis4-2020/14-proxmox/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://henyxia.github.io/scholar/gis4-2020/14-proxmox/</guid>
      <description> Proxmox What is Proxmox?  An operating system based on Debian Can be installed on raw Debian Create and manage containers and virtual machines Gives tool allowing hot and cold migration of VMs And many other features (like user/group management, HA and so on)  Easily usable through a Web UI Four views are available:
 Server view Folder view Storage view Pool view  How to create a new virtual machine  From server or folder view Right click on one node Select create a new VM  Example </description>
    </item>
    
    <item>
      <title></title>
      <link>https://henyxia.github.io/scholar/gis4-2020/15-tutorials/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://henyxia.github.io/scholar/gis4-2020/15-tutorials/</guid>
      <description>Tutorials Team organization  Everyone will have an assigned team Every team will have an unique ID  Tutorials organization  There will be multiple tutorials Every completed tutorial will be rewarded with points The point quantity will be linked to the difficulty of the tutorial Tutorial completion can only be validated by teachers  Tutorial 1 1 point  Go to your team virtual machine and setup network The proxmox interface is available at https://jw.</description>
    </item>
    
    <item>
      <title>IPMI basic commands</title>
      <link>https://henyxia.github.io/notes/ipmi/basics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://henyxia.github.io/notes/ipmi/basics/</guid>
      <description>For all the following examples, the selected channel is 1. This may change depending of your system.
Print LAN configuration ipmitool lan print
Set static IP ipmitool lan set 1 ipsrc static ipmitool lan set 1 ipaddr 192.168.1.12 ipmitool lan set 1 netmask 255.255.255.0 ipmitool lan set 1 defgw ipaddr 192.168.1.1  Set dynamic IP ipmitool lan set 1 ipsrc DHCP
Set VLAN ipmitool lan set 1 vlan id 12</description>
    </item>
    
    <item>
      <title>Create a Ceph OSD</title>
      <link>https://henyxia.github.io/notes/ceph/create-osd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://henyxia.github.io/notes/ceph/create-osd/</guid>
      <description>There are currently two backend storage available in Ceph (since Luminous): FileStore and Bluestore. According to ceph post write performance is almost two times faster on some use cases. Therefore, Bluestore seems to be the new recommended backend for all new installations.
1 - On the new OSD We absolutely need to check that this new OSD have proper access to the ceph cluster. Run ceph -s and it must return the cluster health status.</description>
    </item>
    
    <item>
      <title>Remove a Ceph OSD</title>
      <link>https://henyxia.github.io/notes/ceph/remove-osd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://henyxia.github.io/notes/ceph/remove-osd/</guid>
      <description>Preflight checklist  Connect on the OSD server and check ceph status ceph -s Removing an OSD is NOT recommended if the health is not HEALTH_OK Set the OSD_ID with export OSD_ID=X  Kick out the OSD  Remove the OSD with ceph osd out $OSD_ID Check the reweight (should be 0) with ceph osd tree  Shut off the OSD  Stop the OSD systemctl stop ceph-osd@${OSD_ID}.service Remove the associated service systemctl disable ceph-osd@${OSD_ID}.</description>
    </item>
    
    <item>
      <title>Enable IPMI kernel modules</title>
      <link>https://henyxia.github.io/notes/ipmi/kernel-module/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://henyxia.github.io/notes/ipmi/kernel-module/</guid>
      <description>Once the ipmitool package is installed, it may still be unusable because of missing kernel modules. In order to load them, run:
modprobe ipmi_devintf modprobe ipmi_si  Source: serverfault</description>
    </item>
    
    <item>
      <title>Sentry tips</title>
      <link>https://henyxia.github.io/notes/sentry/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://henyxia.github.io/notes/sentry/</guid>
      <description>Sentry is an awesome tool when it comes to retrieve all issues of a given software. Unfortunately, the actual UI does not show properly issue severity. The following CSS can be added (with Stylus for example) in order to make it visual.
div#blk_router div.app &amp;gt; div.container div.ref-group-list &amp;gt; div * { z-index: 10 !important; } div#blk_router div.app &amp;gt; div.container div.ref-group-list &amp;gt; div { position: relative; } div#blk_router div.app &amp;gt; div.container div.</description>
    </item>
    
    <item>
      <title>Managing soft RAID</title>
      <link>https://henyxia.github.io/notes/raid/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://henyxia.github.io/notes/raid/</guid>
      <description> Create array mdadm --create /dev/mdX --level=X --raid-devices=X /dev/sdX /dev/sdY  Delete array mdadm --stop /dev/mdX mdadm --zero-superblock /dev/sdX mdadm --zero-superblock /dev/sdY  Add disk to array mdadm /dev/mdX --add /dev/sdX  Set disk as faulty mdadm /dev/mdX --fail /dev/sdX  Remove disk in array mdadm /dev/mdX --remove /dev/sdX  Change disk quantity in array mdadm --grow /dev/mdX --raid-devices=X  Switch to RW mdadm --readwrite /dev/mdX  Show details of array mdadm --detail /dev/md0  Show arrays status cat /proc/mdstat  </description>
    </item>
    
    <item>
      <title>Soon to be written</title>
      <link>https://henyxia.github.io/projects/soon/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://henyxia.github.io/projects/soon/</guid>
      <description>Soon, I will add more about some projects I worked on (and some I still work on), like:
 A small monitoring system for the production health based on Arduino Uno A home-made and home-hosted Ceph cluster A Hi-Fi amplifier And more to come!  </description>
    </item>
    
    <item>
      <title>Tuning OSD</title>
      <link>https://henyxia.github.io/notes/ceph/tuning-osd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://henyxia.github.io/notes/ceph/tuning-osd/</guid>
      <description>My OSD are getting OOM killed Sometimes, Ceph OSD use way more memory than expected. Most of the time, the thumb rule to apply is 1To of storage being equal to 1Go of memory. In some cases, like recovery or scrubbing, the rule does not work, resulting in a OOM kill in a memory restrained environment.
When using bluestore, it is possible to reduce the memory used by OSD by tuning some particular settings through the admin socket of the OSD.</description>
    </item>
    
  </channel>
</rss>